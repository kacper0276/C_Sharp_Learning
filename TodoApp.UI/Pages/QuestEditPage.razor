@page "/quests/{Id:int}"
@using Blazored.FluentValidation;
@using FluentValidation;
@using System.Text.Json;
@inject IJSRuntime JsRuntime

<h3>QuestEditPage @Id</h3>
<br />
<ErrorComponent ErrorText="There is an error" />
<br />
<button class="btn btn-primary" @onclick="ShowAlertBox">Show alert box</button>
<div class="prompted-text">
    @PromptedText
</div>

<div class="mt-2">
    <EditForm Model="@quest" OnValidSubmit="@HandleValidSubmit">
        <FluentValidationValidator />

        <div>
            <div class="form-group">
                <label>Nazwa</label>
                <InputText class="form-control" @bind-Value="quest.Title" />
                <ValidationMessage For="@(() => quest.Title)" />
            </div>
            <div class="form-group">
                <label>Opis</label>
                <InputTextArea class="form-control" @bind-Value="quest.Description" />
                <ValidationMessage For="@(() => quest.Description)" />
            </div>
        </div>
        <div class="mt-2">
            <button class="btn btn-success">
                Send
            </button>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    public string? PromptedText { get; set; }

    private async Task ShowAlertBox()
    {
        await JsRuntime.InvokeVoidAsync("alert", $"Id alert box {Id}");
        PromptedText = await JsRuntime.InvokeAsync<string>("prompt", "Take some input:");
    }

    public class QuestForm
    {
        public string Title { get; set; } = "";

        public string? Description { get; set; }
    }

    public class QuestFormValidator : AbstractValidator<QuestForm>
    {
        public QuestFormValidator()
        {
            RuleFor(q => q.Title).NotEmpty().MinimumLength(2);
            When(q => !string.IsNullOrWhiteSpace(q.Description), () =>
            {
                RuleFor(quest => quest.Description).MaximumLength(3000);
            });
        }
    }

    private FluentValidationValidator? fluentValidationValidator;

    private QuestForm quest { get; set; } = new();

    private async Task HandleValidSubmit()
    {
        await JsRuntime.InvokeVoidAsync("alert", JsonSerializer.Serialize(quest));
    }
}